%dw 2.0
output application/json //skipNullOn="everywhere"
import  update from dw::util::Values
var updateOperator={
    "name": "Ken",
    "lastName":"Shokida",
    "age": 30
}
var dynamicUpdate = {
    "name": "Ken",
    "lastName":"Shokida",
    "age": 30
}
var theFieldName="name"
var conditionalUpdate=[{"name": "Ken", "age": 30}, {"name": "Tomo", "age": 70}, {"name": "Kajika", "age": 10}]
var upserting = [{"lastName": "Doe"}, {"lastName": "Parker", "name": "Peter" }]
var myUser = {user: {friend: {name: "Shoki"}, id: 1, name: "Tomo"}, accountId: "leansh" }
var selectors={
    "target":"hit",
    "data":[{
        "target": "hit",
        "more":{"target":"hit"},
        "target":"miss"
    }],
    "target": "miss"
}
var matchCase={
    "name": "raja"
}
var numbers=(1 to 5) as Array /*prints numbers from 1 to 5*/
fun oddNum(n)=(n mod 2)==1
var jsonToCsv=[
    {
        "id":1,
        "name":"abc, xyz",
        "age":24
    },
    {
        "id":2,
        "name":"def",
        "age":23
    },
    {
        "name":"ghi",
        "id":3,
        "age":24
    }
]
var bankNameD="SBSA_AUTO_SAFE_DEPOSITS"
var bankNameO="SBSA - Cash Withdrawal\\Debit"
var multiply=(x)->(y)->x*y
var partialApp=multiply(10)
var dwTest={
    "column_0": "BNANew item",
    "column_1": "BNO57177",
    "column_2": "BDA2023-02-11",
    "column_3": "EFT05:08",
    "column_4": "BTY3",
    "column_5": "SNO8844",
    "column_6": ""
  }
  var dateTimeTest= "2024-03-01T14:53:00.709738+05:30" as DateTime
  var dateTest2="09/02/2025"
  var onNultest={"onNull":null}
  var dwTest2={
      "account":"12345",
      "accountRefType":"overdraft",
      "accepted amount": 100
  }
  var dwTest3=[
     {
      "A" : 1000,
      "B" : "z"
     },
     {
      "A" : 2000,
      "B" : "b"
     },
     {
      "A" : 3000,
      "B" : "x"
     }
    ]
  var orderForms=flatten(outboundOrders_ex.ISADepositOrder.SingleOrders.*Order map(order)->
    order.Forms.*Form map(forms)->{
    orderName: order.@OrderName,
    formName: forms.@Name
})
---
//payload_2 update ["users", "user", "language"] with (if($=="English") "telugu" else $)

// updateOperator update{
//     case a at .age -> a + 2
// }

// dynamicUpdate update {
//     case a at ."$(theFieldName)" -> "Shoki"
// }

// conditionalUpdate map(cu)->
//     cu update{
//         case a at .name if(a ~= "Ken") -> a++" kim"
//         case b at .name if(b ~= "Tomo") -> b++" Jim"
//     }

// upserting map(uu)->
//     uu update{
//         case a at .name! -> if(a==null) "JOHN" else upper(a)
//     }

//07-2-2024

//log("User", myUser.user).friend.name

//selectors..*target

//! true or true

//not true or true

//08-2-2024

// upper(matchCase.name) match  {   /*upper() makes the text uppercase*/
//     case "RAJA" -> "Intern"
//     else -> "Employee"
// }

//(()->1+2)()

//((n,m)->n+m)(1,2)

//10-2-2024

//conditionalUpdate filter $.age>=30
//numbers filter oddNum($)

//numbers filter((n)->oddNum(n)) /*infix notation*/
//filter(numbers,(n,idx)->oddNum(n)) /*prefix notation*/

// numbers
// filter((n)->oddNum(n)) /*filters odd numbers*/
// filter((n)->n>3) /*in odd numbers again filters greater than 3*/

//12-2-2024

//[1,2,3,4,5] filter $~="raja"

/*quoteValues=true*/
// jsonToCsv map{
//     "id":$.id,
//     //"name":"\""++($.name replace "," with "\",\"")++"\"",
//     "name":$.name,
//     "age":$.age
// }

//14-2-2024

//((bankNameD splitBy "_")[0] default "") replace " " with ""
//(bankNameO splitBy  "-")[0] replace " " with ""

//15-2-2024

//payload_3

//19-2-2024

//partialApp(5)

//28-2-2024

// dwTest mapObject ((value, key, index) -> 
//     if(! isEmpty(value)) (value[0 to 2]): value[3 to -1]
//     else (key):null /* to avoid any value with null use skipNullOn="everywhere" */
// )
// dwTest mapObject ((value, key, index) -> 
//     ((value[0 to 2]): value[3 to -1]) if(! isEmpty(value))

// )

//1-3-2024

//"2024-03-01T14:53:00.709738+05:30"
//(now() >> "Asia/Kolkata") as DateTime as String {format: "yyyy-MM-dd HH:mm:ss:SSSS"}

//dateTimeTest as String {format: "yyyy-MM-dd HH:mm:ss:SSSS"} /* need to use as dateTime to format as string */
//dateTimeTest as String {format:"G"}

//uuid()
//onNultest.onNull onNull "empty" /* onNull works when the expression or value returns null*/

//[1, 2, 3] reduce (log("res",(log("value", $$) + log("acc", $))))


// upper(dateTest2 as Date {format:"dd/MM/yyyy"} as String {format:"dd-MMMM-yyyy"})

// {
//     "accRef":{
//         "currAmount":{
//             "amt": dwTest2."accepted amount"
//         }
//     },
//     "accountRefType": dwTest2.accountRefType,
//     "accountNUmber": dwTest2.account
// }

sum(dwTest3.A)

//outboundOrders_ex.ISADepositOrder.SingleOrders.*Order.@OrderName /*all transactions*/
//outboundOrders_ex.ISADepositOrder.processedTransactions /*processeTransactions*/
//if(! isEmpty(outboundOrders_ex.ISADepositOrder.RetryCount)) outboundOrders_ex.ISADepositOrder.RetryCount else 0 /*retryCount*/

// orderForms map(forms)->{
//     orderName:forms.orderName,
//     formName:forms.formName,
//     isDuplicate: sizeOf(orderForms filter($.formName == forms.formName) default "") > 1
// }
